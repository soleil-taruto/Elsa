using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.GameCommons;
using Charlotte.Commons;

namespace Charlotte.Games
{
	public static class Effects
	{
		public static IEnumerable<bool> 小爆発(double x, double y)
		{
			foreach (DDScene scene in DDSceneUtils.Create(5))
			{
				DDDraw.SetAlpha(0.7);
				DDDraw.SetBright(1.0, 0.5, 0.5);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);
				DDDraw.DrawZoom(0.3 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		public static IEnumerable<bool> 中爆発(double x, double y)
		{
			foreach (DDScene scene in DDSceneUtils.Create(10))
			{
				DDDraw.SetAlpha(1.0 - scene.Rate * 0.3);
				DDDraw.SetBright(1.0, 0.3, 0.3);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);
				DDDraw.DrawZoom(3.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		public static IEnumerable<bool> 空中ジャンプの足場(double x, double y)
		{
			foreach (DDScene scene in DDSceneUtils.Create(10))
			{
				DDDraw.SetAlpha(1.0 - scene.Rate);
				DDDraw.SetBright(0.5, 1.0, 1.0);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);
				DDDraw.DrawZoom(0.5 + 1.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		public static IEnumerable<bool> バズーカ発射(double x, double y)
		{
			foreach (DDScene scene in DDSceneUtils.Create(5))
			{
				DDDraw.SetAlpha(0.7);
				DDDraw.SetBright(1.0, 0.5, 0.5);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);
				DDDraw.DrawZoom(1.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		public static IEnumerable<bool> ほむらシールド終了(double x, double y)
		{
			foreach (DDScene scene in DDSceneUtils.Create(10))
			{
				DDDraw.SetAlpha(1.0 - scene.Rate);
				DDDraw.SetBright(0.0, 0.0, 0.0);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);
				DDDraw.DrawZoom(0.5 + 1.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		public static void ティウンティウン_AddToEL(double x, double y)
		{
			foreach (IEnumerable<bool> task in ティウンティウン(x, y))
				DDGround.EL.Add(SCommon.Supplier(task));
		}

		private static IEnumerable<IEnumerable<bool>> ティウンティウン(double x, double y)
		{
			for (int c = 1; c <= 2; c++)
			{
				int speed = c * 3;
				int nanameSpeed = c * 2;

				yield return ティウンティウンSub(x, y, -speed, 0);
				yield return ティウンティウンSub(x, y, 0, -speed);
				yield return ティウンティウンSub(x, y, speed, 0);
				yield return ティウンティウンSub(x, y, 0, speed);

				yield return ティウンティウンSub(x, y, -nanameSpeed, -nanameSpeed);
				yield return ティウンティウンSub(x, y, -nanameSpeed, nanameSpeed);
				yield return ティウンティウンSub(x, y, nanameSpeed, -nanameSpeed);
				yield return ティウンティウンSub(x, y, nanameSpeed, nanameSpeed);
			}
		}

		private static IEnumerable<bool> ティウンティウンSub(double x, double y, int xSpeedScale, int ySpeedScale)
		{
			double xSpeed = xSpeedScale * 0.8;
			double ySpeed = ySpeedScale * 0.8;

			for (; ; )
			{
				x += xSpeed;
				y += ySpeed;

				if (DDUtils.IsOutOfCamera(new D2Point(x, y)))
					break;

				DDDraw.DrawCenter(DDGround.GeneralResource.Dummy, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);

				yield return true;
			}
		}

		public static IEnumerable<bool> スライディング(double x, double y)
		{
			foreach (DDPicture picture in Ground.I.Picture.Effect_A01_Sliding)
			{
				for (int c = 0; c < 4; c++)
				{
					DDDraw.DrawCenter(picture, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);

					yield return true;
				}
			}
		}

#if false // old -- プレイヤーの描画で行うことにした。
		public static IEnumerable<bool> ヒットバック_A()
		{
			for (int c = 0; c < Consts.PLAYER_DAMAGE_FRAME_MAX; c++)
			{
				if (c / 6 % 2 == 0)
				{
					DDDraw.DrawCenter(Ground.I.Picture.Effect_A01_Shock_A, Game.I.Player.X - DDGround.ICamera.X, Game.I.Player.Y - DDGround.ICamera.Y);
				}
				yield return true;
			}
		}
#endif

		public static IEnumerable<bool> ヒットバック_B(double x, double y)
		{
			foreach (DDPicture picture in Ground.I.Picture.Effect_A01_Shock_B)
			{
				for (int c = 0; c < 6; c++)
				{
					DDDraw.DrawCenter(picture, x - DDGround.ICamera.X, y - DDGround.ICamera.Y);

					yield return true;
				}
			}
		}
	}
}
