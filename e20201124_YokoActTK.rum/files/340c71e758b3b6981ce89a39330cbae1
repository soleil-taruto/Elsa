using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DxLibDLL;
using Charlotte.Commons;
using Charlotte.GameCommons;
using Charlotte.Games.Enemies;
using Charlotte.Games.Shots;

namespace Charlotte.Games.Attacks
{
	public class Attack_ほむらシールド : Attack
	{
		public override bool IsInvincibleMode()
		{
			return false;
		}

		protected override IEnumerable<bool> E_Draw()
		{
			if (Game.I.Shots.Iterate().Any(v => v is Shot_ほむらシールド)) // 2つ同時は変になる。
				goto endFunc;

			PlayerTracer.MomentInfo[] moments = PlayerTracer.GetMoments();

			if (moments.Length == 0) // ? 記録無し -> 発動無効！
				goto endFunc;

#if false // 発動モーション無し
			for (int frame = 0; ; frame++)
			{
				int koma = frame / 6;

				if (Ground.I.Picture2.ほむらシールド.Length <= koma)
					break;

				if (frame == 4 * 6)
					this.カットイン();

				double xZoom = Game.I.Player.FacingLeft ? -1.0 : 1.0;

				DDDraw.SetTaskList(Game.I.Player.Draw_EL);
				DDDraw.DrawBegin(
					Ground.I.Picture2.ほむらシールド[koma],
					Game.I.Player.X - DDGround.ICamera.X - 8.0 * xZoom,
					Game.I.Player.Y - DDGround.ICamera.Y + 2.0
					);
				DDDraw.DrawZoom_X(xZoom);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
#endif

			Func<bool> f_wallEffect = SCommon.Supplier(this.E_WallEffect());

			for (int index = moments.Length - 1; 0 <= index; index--)
			{
				if (DDInput.C.GetInput() <= 0) // ? 特殊攻撃ボタンを離した。
				{
					moments = moments.Skip(index).ToArray(); // ここから再生するので、ここ以前を切り捨てる。
					break;
				}

				Game.I.Player.X = moments[index].X;
				Game.I.Player.Y = moments[index].Y;

				Game.I.カメラ位置調整(false);
				Game.I.DrawWall();
				Game.I.DrawMap();

				foreach (Enemy enemy in moments[index].Enemies)
					enemy.DrawOnly();

				foreach (Action motion in moments[index].Motions)
				{
					DDTaskList draw_el_bk = Game.I.Player.Draw_EL;

					Game.I.Player.Draw_EL = new DDTaskList();

					motion();

					Game.I.Player.Draw_EL.ExecuteAllTask();
					Game.I.Player.Draw_EL = draw_el_bk;
				}

				f_wallEffect();

				DDEngine.EachFrame();
			}

			PlayerTracer.Clear(); // 巻き戻し中に記録されたモーメントは無効であるため、ここでクリアする。

			// 自弾の描画の前に敵の描画が行われるので [Shot_ほむらシールド] による敵の巻き戻しより前に
			// ほむらシールド発動前の敵が描画されてしまう。
			// --> ここでクリアしておく
			Game.I.Enemies.Clear();

			// 巻き戻し前のショットが巻き戻し後に残っているとおかしいのでクリア
			Game.I.Shots.Clear();

			Game.I.Shots.Add(new Shot_ほむらシールド()
			{
				Moments = moments,
			});

		endFunc:
			yield return false;
		}

		private static DDSubScreen GrayScreen_R = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H);
		private static DDSubScreen GrayScreen_G = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H);
		private static DDSubScreen GrayScreen_B = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H);
		private static DDSubScreen GrayScreen = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H);
		private static DDSubScreen MaskScreen = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H, true);
		private static DDSubScreen WorkScreen = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H);

		private IEnumerable<bool> E_WallEffect()
		{
			double expBokashiRate = 0.0;

			double circle_x = Game.I.Player.X - DDGround.ICamera.X;
			double circle_y = Game.I.Player.Y - DDGround.ICamera.Y;

			for (int frame = 0; ; frame++)
			{
				// DDGround.MainScreen をグレースケール化 -> GrayScreen
				{
					DX.GraphBlend(
						GrayScreen_R.GetHandle(), // ソース画像かつ出力先
						DDGround.MainScreen.GetHandle(), // ブレンド画像
						255,
						DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
						DX.DX_RGBA_SELECT_BLEND_R, // 出力先に適用する R 値
						DX.DX_RGBA_SELECT_BLEND_R, // 出力先に適用する G 値
						DX.DX_RGBA_SELECT_BLEND_R, // 出力先に適用する B 値
						DX.DX_RGBA_SELECT_SRC_A // 出力先に適用する A 値
						);

					// DX_RGBA_SELECT_SRC_R == ソース画像の R 値
					// DX_RGBA_SELECT_SRC_G == ソース画像の G 値
					// DX_RGBA_SELECT_SRC_B == ソース画像の B 値
					// DX_RGBA_SELECT_SRC_A == ソース画像の A 値
					// DX_RGBA_SELECT_BLEND_R == ブレンド画像の R 値
					// DX_RGBA_SELECT_BLEND_G == ブレンド画像の G 値
					// DX_RGBA_SELECT_BLEND_B == ブレンド画像の B 値
					// DX_RGBA_SELECT_BLEND_A == ブレンド画像の A 値

					DX.GraphBlend(
						GrayScreen_G.GetHandle(),
						DDGround.MainScreen.GetHandle(),
						255,
						DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
						DX.DX_RGBA_SELECT_BLEND_G,
						DX.DX_RGBA_SELECT_BLEND_G,
						DX.DX_RGBA_SELECT_BLEND_G,
						DX.DX_RGBA_SELECT_SRC_A
						);

					DX.GraphBlend(
						GrayScreen_B.GetHandle(),
						DDGround.MainScreen.GetHandle(),
						255,
						DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
						DX.DX_RGBA_SELECT_BLEND_B,
						DX.DX_RGBA_SELECT_BLEND_B,
						DX.DX_RGBA_SELECT_BLEND_B,
						DX.DX_RGBA_SELECT_SRC_A
						);

					using (GrayScreen.Section())
					{
						DDDraw.DrawSimple(GrayScreen_R.ToPicture(), 0, 0);
						DDDraw.SetAlpha(0.5);
						DDDraw.DrawSimple(GrayScreen_G.ToPicture(), 0, 0);
						DDDraw.SetAlpha(0.333);
						DDDraw.DrawSimple(GrayScreen_B.ToPicture(), 0, 0);
						DDDraw.Reset();
					}
				}

				// GrayScreen の描画範囲にのみアルファ値をセット -> MaskScreen
				{
					DX.FillRectGraph(MaskScreen.GetHandle(), 0, 0, DDConsts.Screen_W, DDConsts.Screen_H, 0, 0, 0);

					using (MaskScreen.Section())
					{
						// ゲーム画面サイズ 960 x 540 -> 対角線 1101.* -> なので、上限 2300
						//
						double circle_wh = Math.Min(2300, frame * 13);

						DDDraw.DrawBegin(
							DDGround.GeneralResource.WhiteCircle,
							circle_x,
							circle_y
							);
						DDDraw.DrawSetSize(circle_wh, circle_wh);
						DDDraw.DrawEnd();
					}

					DX.GraphBlend(
						MaskScreen.GetHandle(),
						GrayScreen.GetHandle(),
						255,
						DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
						DX.DX_RGBA_SELECT_BLEND_R,
						DX.DX_RGBA_SELECT_BLEND_G,
						DX.DX_RGBA_SELECT_BLEND_B,
						DX.DX_RGBA_SELECT_SRC_R // RGB の内どれでも良い。
						);
				}

				DDUtils.Approach(ref expBokashiRate, 1.0, 0.97);

				// DDGround.MainScreen を拡大
				{
					using (WorkScreen.Section())
					{
						DDDraw.DrawBegin(DDGround.MainScreen.ToPicture(), DDConsts.Screen_W / 2, DDConsts.Screen_H / 2);
						DDDraw.DrawZoom(1.0 + 0.5 * expBokashiRate);
						DDDraw.DrawEnd();
					}
					DDDraw.DrawSimple(WorkScreen.ToPicture(), 0, 0);
				}

				// DDGround.MainScreen をぼかす
				{
					DX.GraphFilter(
						DDGround.MainScreen.GetHandle(),
						DX.DX_GRAPH_FILTER_GAUSS,
						16,
						SCommon.ToInt(expBokashiRate * 7000.0)
						);
				}

				// MaskScreen を描画
				{
					DDDraw.DrawSimple(MaskScreen.ToPicture(), 0, 0);
				}

				yield return true;
			}
		}

#if false // 不使用
		private void カットイン()
		{
			DDMain.KeepMainScreen();

			foreach (DDScene scene in DDSceneUtils.Create(40))
			{
				DDDraw.DrawSimple(DDGround.KeptMainScreen.ToPicture(), 0, 0);

				DDDraw.SetBright(0, 0, 0);
				DDDraw.SetAlpha(1.0 - scene.Rate);
				DDDraw.DrawBegin(
					DDGround.GeneralResource.WhiteCircle,
					Game.I.Player.X - DDGround.ICamera.X,
					Game.I.Player.Y - DDGround.ICamera.Y
					);
				DDDraw.DrawZoom(0.3 + 20.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				DDEngine.EachFrame();
			}
		}
#endif
	}
}
