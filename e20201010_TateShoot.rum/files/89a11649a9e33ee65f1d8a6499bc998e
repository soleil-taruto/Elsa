using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DxLibDLL;
using Charlotte.Commons;
using Charlotte.GameCommons;
using Charlotte.GameCommons.Options;
using Charlotte.Games.Enemies;
using Charlotte.Games.Scripts;
using Charlotte.Games.Shots;
using Charlotte.Games.Walls;

namespace Charlotte.Games
{
	public class Game : IDisposable
	{
		public int Zanki = Consts.DEFAULT_ZANKI;
		public int ZanBomb = Consts.DEFAULT_ZAN_BOMB;
		public long Score = 0;
		public Script Script = new Script_テスト0001(); // 軽量なダミー初期オブジェクト

		// <---- prm

		public static Game I;

		private DDSubScreen Field;

		public Game()
		{
			I = this;

			this.Field = new DDSubScreen(Consts.FIELD_W, Consts.FIELD_H);
		}

		public void Dispose()
		{
			this.Field.Dispose();
			this.Field = null;

			I = null;
		}

		private Player Player = new Player();

		private struct InputInfo
		{
			public bool Dir2;
			public bool Dir4;
			public bool Dir6;
			public bool Dir8;
			public bool Slow;
			public bool Shot;
			public bool Bomb;
		}

		private InputInfo Input;
		private InputInfo LastInput;

		public int Frame;

		public void Perform()
		{
			DDUtils.Random = new DDRandom(1u, 1u, 1u, 1u); // 電源パターン確保のため

			DDCurtain.SetCurtain();
			DDEngine.FreezeInput();
			this.Frame = 0;

			Ground.I.Music.MUS_STAGE_01.Play(); // test

			this.Player.Reset();

			for (; ; this.Frame++)
			{
				// *** チート *** >

				if (DDKey.IsPound(DX.KEY_INPUT_PGUP))
				{
					this.Player.Power += Consts.PLAYER_POWER_PER_LEVEL;
				}
				if (DDKey.IsPound(DX.KEY_INPUT_PGDN))
				{
					this.Player.Power -= Consts.PLAYER_POWER_PER_LEVEL;
				}
				DDUtils.ToRange(ref this.Player.Power, 0, Consts.PLAYER_POWER_MAX);

				// < *** チート ***

				if (1 <= DDInput.PAUSE.GetInput() && 10 < this.Frame)
				{
					this.Pause();
				}


				this.LastInput = this.Input; // 前回のプレイヤー入力として退避

				// プレイヤー入力
				{
					this.Input.Dir2 = 1 <= DDInput.DIR_2.GetInput();
					this.Input.Dir4 = 1 <= DDInput.DIR_4.GetInput();
					this.Input.Dir6 = 1 <= DDInput.DIR_6.GetInput();
					this.Input.Dir8 = 1 <= DDInput.DIR_8.GetInput();
					this.Input.Slow = 1 <= DDInput.A.GetInput();
					this.Input.Shot = 1 <= DDInput.B.GetInput();
					this.Input.Bomb = 1 <= DDInput.C.GetInput();
				}

				this.Player.LastX = this.Player.X;
				this.Player.LastY = this.Player.Y;

			startBornPlayer:
				if (1 <= this.Player.BornFrame)
				{
					int frm = this.Player.BornFrame - 1;

					if (Consts.PLAYER_BORN_FRAME_MAX < frm)
					{
						this.Player.BornFrame = 0;
						goto endBornPlayer;
					}
					this.Player.BornFrame++;
					double rate = (double)frm / Consts.PLAYER_BORN_FRAME_MAX;

					if (frm == 0) // init
					{
						// none
					}
					DDUtils.Approach(ref this.Player.BornFollowX, this.Player.X, 1.0 - rate);
					DDUtils.Approach(ref this.Player.BornFollowY, this.Player.Y, 1.0 - rate);
				}
			endBornPlayer:

				if (1 <= this.Player.DeadFrame)
				{
					int frm = this.Player.DeadFrame - 1;

					if (Consts.PLAYER_DEAD_FRAME_MAX < frm)
					{
						this.Player.Reset();
						goto startBornPlayer;
					}
					this.Player.DeadFrame++;

					if (frm == 0) // init
					{
						this.PlayerEffects.Add(SCommon.Supplier(Effects.PlayerDead()));
					}
					goto endPlayerMove;
				}

				if (1 <= this.Player.BombFrame)
				{
					int frm = this.Player.BombFrame - 1;

					if (Consts.PLAYER_BOMB_FRAME_MAX < frm)
					{
						this.Player.BombFrame = 0;
						goto endBombPlayer;
					}
					this.Player.BombFrame++;

					if (frm == 0) // init
					{
						this.Player.Bomb();
					}
				}
			endBombPlayer:

				// プレイヤー移動
				{
					bool d2 = this.Input.Dir2;
					bool d4 = this.Input.Dir4;
					bool d6 = this.Input.Dir6;
					bool d8 = this.Input.Dir8;

					double speed;

					if (this.Input.Slow)
						speed = 2.5;
					else
						speed = 5.0;

					double nanameSpeed = speed / Math.Sqrt(2.0);

					if (d2 && d4) // 左下
					{
						this.Player.X -= nanameSpeed;
						this.Player.Y += nanameSpeed;
					}
					else if (d2 && d6) // 右下
					{
						this.Player.X += nanameSpeed;
						this.Player.Y += nanameSpeed;
					}
					else if (d4 && d8) // 左上
					{
						this.Player.X -= nanameSpeed;
						this.Player.Y -= nanameSpeed;
					}
					else if (d6 && d8) // 右上
					{
						this.Player.X += nanameSpeed;
						this.Player.Y -= nanameSpeed;
					}
					else if (d2) // 下
					{
						this.Player.Y += speed;
					}
					else if (d4) // 左
					{
						this.Player.X -= speed;
					}
					else if (d6) // 右
					{
						this.Player.X += speed;
					}
					else if (d8) // 上
					{
						this.Player.Y -= speed;
					}

					DDUtils.Approach(ref this.Player.X, 0.0, (double)Consts.FIELD_W);
					DDUtils.Approach(ref this.Player.Y, 0.0, (double)Consts.FIELD_H);

					if (d4) // 左
					{
						DDUtils.Minim(ref this.Player.XMoveFrame, 0);
						this.Player.XMoveFrame--;
					}
					else if (d6) // 右
					{
						DDUtils.Maxim(ref this.Player.XMoveFrame, 0);
						this.Player.XMoveFrame++;
					}
					else
					{
						this.Player.XMoveFrame = 0;
					}

					if (d8) // 上
					{
						DDUtils.Minim(ref this.Player.YMoveFrame, 0);
						this.Player.YMoveFrame--;
					}
					else if (d2) // 下
					{
						DDUtils.Maxim(ref this.Player.YMoveFrame, 0);
						this.Player.YMoveFrame++;
					}
					else
					{
						this.Player.YMoveFrame = 0;
					}

					DDUtils.Approach(ref this.Player.XMoveRate, SCommon.Sign(this.Player.XMoveFrame), 0.95);
					DDUtils.Approach(ref this.Player.YMoveRate, SCommon.Sign(this.Player.YMoveFrame), 0.95);
				}

				// TODO TODO TODO TODO TODO

			endPlayerMove:



				using (this.Field.Section()) // フィールド描画
				{
					foreach (Wall wall in this.Walls.Iterate())
						wall.Draw();

					foreach (Shot shot in this.Shots.Iterate())
						shot.Draw();

					this.Player.Draw();

					foreach (Enemy.Kind_e kind in new Enemy.Kind_e[] { Enemy.Kind_e.ENEMY, Enemy.Kind_e.TAMA, Enemy.Kind_e.ITEM })
						foreach (Enemy enemy in this.Enemies.Iterate())
							if (enemy.Kind == kind)
								enemy.Draw();

					this.EnemyEffects.ExecuteAllTask();
					this.PlayerEffects.ExecuteAllTask();
				}

				DDDraw.DrawCenter(
					Ground.I.Picture.P_WALL,
					DDConsts.Screen_W / 2 + Math.Sin(DDEngine.ProcFrame / 211.0) * 10.0,
					DDConsts.Screen_H / 2 + Math.Sin(DDEngine.ProcFrame / 223.0) * 10.0
					);

				DDDraw.DrawSimple(this.Field.ToPicture(), Consts.FIELD_L, Consts.FIELD_T);

				// todo: 画面右のステータス画面

				DDEngine.EachFrame();
			}
		}

		private void Pause()
		{
			bool pauseBtnRel = false;

			for (; ; )
			{
				if (DDInput.PAUSE.GetInput() == -1 && pauseBtnRel)
					break;

				if (DDInput.PAUSE.GetInput() == 0)
					pauseBtnRel = true;

				DDDraw.DrawRect(DDGround.LastMainScreen.ToPicture(), 0, 0, DDConsts.Screen_W, DDConsts.Screen_H);
				DDCurtain.DrawCurtain(0.5);

				DDEngine.EachFrame();
			}
			DDEngine.FreezeInput();
		}

		public DDList<Enemy> Enemies = new DDList<Enemy>();
		public DDList<Shot> Shots = new DDList<Shot>();
		public DDList<Wall> Walls = new DDList<Wall>();
		public DDTaskList EnemyEffects = new DDTaskList();
		public DDTaskList PlayerEffects = new DDTaskList();

		public DDList<DDCrash> EnemyCrashes = new DDList<DDCrash>();
		public DDList<DDCrash> PlayerCrashes = new DDList<DDCrash>();
		public DDList<DDCrash> ShotCrashes = new DDList<DDCrash>();
	}
}
