using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.Commons;
using Charlotte.GameCommons;
using Charlotte.GameCommons.Options;

namespace Charlotte.Games.Enemies
{
	public class Enemy_ノコノコ : Enemy
	{
		private bool 端から落ちない;
		private bool FacingLeft;

		public Enemy_ノコノコ(double x, double y, bool 端から落ちない, bool facingLeft)
			: base(x, y, 5, 1, false)
		{
			this.端から落ちない = 端から落ちない;
			this.FacingLeft = facingLeft;
		}

		protected override IEnumerable<bool> E_Draw()
		{
			const double CHARA_R = 10.0;

			double ySpeed = 0.0;

			for (; ; )
			{
				if (Game.I.Map.GetCell(GameCommon.ToTablePoint(new D2Point(this.X - CHARA_R, this.Y))).Tile.IsWall()) // ? 左側面接触
				{
					this.FacingLeft = false;
				}
				if (Game.I.Map.GetCell(GameCommon.ToTablePoint(new D2Point(this.X + CHARA_R, this.Y))).Tile.IsWall()) // ? 右側面接触
				{
					this.FacingLeft = true;
				}

				const double X_SPEED = 2.0;
				const double GRAVITY = 1.0;
				const double Y_SPEED_MAX = 10.0;

				this.X += X_SPEED * (this.FacingLeft ? -1 : 1);
				this.Y += ySpeed;

				ySpeed += GRAVITY;
				ySpeed = Math.Min(ySpeed, Y_SPEED_MAX);

				if (GameCommon.壁処理(ref this.X, ref this.Y, new D2Point[] { new D2Point(0.0, CHARA_R) }))
				{
					ySpeed = 0.0;
				}

				// 暫定_描画
				{
					DDDraw.DrawBegin(DDGround.GeneralResource.Dummy, this.X, this.Y);
					DDDraw.DrawRotate(DDEngine.ProcFrame / 10.0);
					DDDraw.DrawEnd();

					DDPrint.SetPrint((int)this.X, (int)this.Y);
					DDPrint.SetBorder(new I3Color(0, 0, 0));
					DDPrint.Print("");
					DDPrint.Reset();
				}

				this.Crash = DDCrashUtils.Circle(new D2Point(this.X, this.Y), CHARA_R);

				yield return true;
			}
		}
	}
}
