using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.GameCommons;
using Charlotte.Commons;

namespace Charlotte.Games.Surfaces
{
	public class Surface_雪 : Surface
	{
		private DDTaskList EL = new DDTaskList();

		private double AddingRate = 0.0;
		private double DestAddingRate = 0.0;

		public override void Draw()
		{
			DDUtils.Approach(ref this.AddingRate, this.DestAddingRate, 0.999);

			for (int c = 0; c < 7; c++)
				if (DDUtils.Random.Real2() < this.AddingRate)
					this.EL.Add(SCommon.Supplier(this.雪()));

			this.EL.ExecuteAllTask();
		}

		private IEnumerable<bool> 雪()
		{
			double x = DDUtils.Random.Real2() * DDConsts.Screen_W;
			double y = -10.0;
			double z = DDUtils.Random.Real2();
			double r = 1.0 + z * 4.0;
			double xAdd = DDUtils.Random.Real2() * -1.5;
			double yAdd = 0.5 + z * 1.5;

			while (y < DDConsts.Screen_H)
			{
				x += xAdd;
				y += yAdd;

				if (x < 0.0)
					x += DDConsts.Screen_W;

				xAdd += (DDUtils.Random.Real() - 0.5) * 0.01;

				DDDraw.SetAlpha(0.5);
				DDDraw.DrawBegin(DDGround.GeneralResource.WhiteCircle, x, y);
				DDDraw.DrawZoom(r / (DDGround.GeneralResource.WhiteCircle.Get_W() / 2.0));
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
		}

		protected override void Invoke_02(string command, params string[] arguments)
		{
			int c = 0;

			if (command == "Rate")
			{
				this.DestAddingRate = double.Parse(arguments[c++]);
			}
			else
			{
				throw new DDError();
			}
		}

		protected override string[] Serialize_02()
		{
			return new string[]
			{
				this.AddingRate.ToString("F9"),
				this.DestAddingRate.ToString("F9"),
			};
		}

		protected override void Deserialize_02(string[] lines)
		{
			int c = 0;

			this.AddingRate = double.Parse(lines[c++]);
			this.DestAddingRate = double.Parse(lines[c++]);
		}
	}
}
