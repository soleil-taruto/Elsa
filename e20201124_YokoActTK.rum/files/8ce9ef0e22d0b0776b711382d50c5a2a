using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DxLibDLL;
using Charlotte.Commons;
using Charlotte.GameCommons;
using Charlotte.Games.Enemies;
using Charlotte.Games.Shots;

namespace Charlotte.Games.Attacks
{
	public class Attack_ほむらシールド : Attack
	{
		public override bool IsInvincibleMode()
		{
			return false;
		}

		protected override IEnumerable<bool> E_Draw()
		{
			if (Game.I.Shots.Iterate().Any(v => v is Shot_ほむらシールド)) // 2つ同時は変になる。
				goto endFunc;

			PlayerTracer.MomentInfo[] moments = PlayerTracer.GetMoments();

			if (moments.Length == 0) // ? 記録無し -> 発動無効！
				goto endFunc;

#if false // 発動モーション無し
			for (int frame = 0; ; frame++)
			{
				int koma = frame / 6;

				if (Ground.I.Picture2.ほむらシールド.Length <= koma)
					break;

				if (frame == 4 * 6)
					this.カットイン();

				double xZoom = Game.I.Player.FacingLeft ? -1.0 : 1.0;

				DDDraw.SetTaskList(Game.I.Player.Draw_EL);
				DDDraw.DrawBegin(
					Ground.I.Picture2.ほむらシールド[koma],
					Game.I.Player.X - DDGround.ICamera.X - 8.0 * xZoom,
					Game.I.Player.Y - DDGround.ICamera.Y + 2.0
					);
				DDDraw.DrawZoom_X(xZoom);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				yield return true;
			}
#endif

			Func<bool> f_wallEffect = SCommon.Supplier(this.E_WallEffect());

			for (int index = moments.Length - 1; 0 <= index; index--)
			{
				if (DDInput.C.GetInput() <= 0) // ? 特殊攻撃ボタンを離した。
				{
					moments = moments.Skip(index).ToArray(); // ここから再生するので、ここ以前を切り捨てる。
					break;
				}

				Game.I.Player.X = moments[index].X;
				Game.I.Player.Y = moments[index].Y;

				Game.I.カメラ位置調整(false);
				Game.I.DrawWall();
				Game.I.DrawMap();

				foreach (Enemy enemy in moments[index].Enemies)
					enemy.DrawOnly();

				foreach (Action motion in moments[index].Motions)
				{
					DDTaskList draw_el_bk = Game.I.Player.Draw_EL;

					Game.I.Player.Draw_EL = new DDTaskList();

					motion();

					Game.I.Player.Draw_EL.ExecuteAllTask();
					Game.I.Player.Draw_EL = draw_el_bk;
				}

				f_wallEffect();

				DDEngine.EachFrame();
			}

			PlayerTracer.Clear(); // 巻き戻し中に記録されたモーメントは無効であるため、ここでクリアする。

			Game.I.Shots.Add(new Shot_ほむらシールド()
			{
				Moments = moments,
			});

			// 自弾の描画の前に敵の描画が行われるので [Shot_ほむらシールド] による敵の巻き戻しより前に
			// ほむらシールド発動前の敵が描画されてしまう。
			// --> ここでクリアしておく
			Game.I.Enemies.Clear();

		endFunc:
			yield return false;
		}

		private IEnumerable<bool> E_WallEffect()
		{
			using (DDSubScreen grayScrR = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H))
			using (DDSubScreen grayScrG = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H))
			using (DDSubScreen grayScrB = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H))
			using (DDSubScreen grayScr = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H))
			using (DDSubScreen maskScr = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H, true))
			using (DDSubScreen workScr = new DDSubScreen(DDConsts.Screen_W, DDConsts.Screen_H))
			{
				double expBokashiRate = 0.0;

				for (int frame = 0; ; frame++)
				{
					// DDGround.MainScreen をグレースケール化 -> grayScr
					{
						DX.GraphBlend(
							grayScrR.GetHandle(),
							DDGround.MainScreen.GetHandle(),
							255,
							DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
							DX.DX_RGBA_SELECT_BLEND_R,
							DX.DX_RGBA_SELECT_BLEND_R,
							DX.DX_RGBA_SELECT_BLEND_R,
							DX.DX_RGBA_SELECT_SRC_A
							);

						DX.GraphBlend(
							grayScrG.GetHandle(),
							DDGround.MainScreen.GetHandle(),
							255,
							DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
							DX.DX_RGBA_SELECT_BLEND_G,
							DX.DX_RGBA_SELECT_BLEND_G,
							DX.DX_RGBA_SELECT_BLEND_G,
							DX.DX_RGBA_SELECT_SRC_A
							);

						DX.GraphBlend(
							grayScrB.GetHandle(),
							DDGround.MainScreen.GetHandle(),
							255,
							DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
							DX.DX_RGBA_SELECT_BLEND_B,
							DX.DX_RGBA_SELECT_BLEND_B,
							DX.DX_RGBA_SELECT_BLEND_B,
							DX.DX_RGBA_SELECT_SRC_A
							);

						using (grayScr.Section())
						{
							DDDraw.DrawSimple(grayScrR.ToPicture(), 0, 0);
							DDDraw.SetAlpha(0.5);
							DDDraw.DrawSimple(grayScrG.ToPicture(), 0, 0);
							DDDraw.SetAlpha(0.333);
							DDDraw.DrawSimple(grayScrB.ToPicture(), 0, 0);
							DDDraw.Reset();
						}
					}

					// grayScr の描画範囲にのみアルファ値をセット -> maskScr
					{
						DX.FillRectGraph(maskScr.GetHandle(), 0, 0, DDConsts.Screen_W, DDConsts.Screen_H, 0, 0, 0);

						using (maskScr.Section())
						{
							// ゲーム画面サイズ 960 x 540 -> 対角線 1101.* -> なので、上限 2300
							//
							double circle_wh = Math.Min(2300, frame * 20);

							DDDraw.DrawBegin(
								DDGround.GeneralResource.WhiteCircle,
								Game.I.Player.X - DDGround.ICamera.X,
								Game.I.Player.Y - DDGround.ICamera.Y
								);
							DDDraw.DrawSetSize(circle_wh, circle_wh);
							DDDraw.DrawEnd();
						}

						DX.GraphBlend(
							maskScr.GetHandle(),
							grayScr.GetHandle(),
							255,
							DX.DX_GRAPH_BLEND_RGBA_SELECT_MIX,
							DX.DX_RGBA_SELECT_BLEND_R,
							DX.DX_RGBA_SELECT_BLEND_G,
							DX.DX_RGBA_SELECT_BLEND_B,
							DX.DX_RGBA_SELECT_SRC_R
							);
					}

					DDUtils.Approach(ref expBokashiRate, 1.0, 0.9);

					// DDGround.MainScreen を拡大
					{
						using (workScr.Section())
						{
							DDDraw.DrawBegin(DDGround.MainScreen.ToPicture(), DDConsts.Screen_W / 2, DDConsts.Screen_H / 2);
							DDDraw.DrawZoom(1.0 + 0.5 * expBokashiRate);
							DDDraw.DrawEnd();
						}
						DDDraw.DrawSimple(workScr.ToPicture(), 0, 0);
					}

					// DDGround.MainScreen をぼかす
					{
						DX.GraphFilter(
							DDGround.MainScreen.GetHandle(),
							DX.DX_GRAPH_FILTER_GAUSS,
							16,
							SCommon.ToInt(expBokashiRate * 3000.0)
							);
					}

					// maskScr を描画
					{
						DDDraw.DrawSimple(maskScr.ToPicture(), 0, 0);
					}

					yield return true;
				}
			}
		}

#if false // 不使用
		private void カットイン()
		{
			DDMain.KeepMainScreen();

			foreach (DDScene scene in DDSceneUtils.Create(40))
			{
				DDDraw.DrawSimple(DDGround.KeptMainScreen.ToPicture(), 0, 0);

				DDDraw.SetBright(0, 0, 0);
				DDDraw.SetAlpha(1.0 - scene.Rate);
				DDDraw.DrawBegin(
					DDGround.GeneralResource.WhiteCircle,
					Game.I.Player.X - DDGround.ICamera.X,
					Game.I.Player.Y - DDGround.ICamera.Y
					);
				DDDraw.DrawZoom(0.3 + 20.0 * scene.Rate);
				DDDraw.DrawEnd();
				DDDraw.Reset();

				DDEngine.EachFrame();
			}
		}
#endif
	}
}
