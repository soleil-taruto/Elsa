using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Charlotte.Tools
{
	public static class StringTools
	{
		public static Encoding ENCODING_SJIS = Encoding.GetEncoding(932);









		public static string PUNCT =
			GetString_SJISHalfCodeRange(0x21, 0x2f) +
			GetString_SJISHalfCodeRange(0x3a, 0x40) +
			GetString_SJISHalfCodeRange(0x5b, 0x60) +
			GetString_SJISHalfCodeRange(0x7b, 0x7e);






		public static string GetString_SJISHalfCodeRange(int codeMin, int codeMax)
		{
			byte[] buff = new byte[codeMax - codeMin + 1];

			for (int code = codeMin; code <= codeMax; code++)
			{
				buff[code - codeMin] = (byte)code;
			}
			return ENCODING_SJIS.GetString(buff);
		}





		public static string MBC_PUNCT =
			GetString_SJISCodeRange(0x81, 0x41, 0x7e) +
			GetString_SJISCodeRange(0x81, 0x80, 0xac) +
			GetString_SJISCodeRange(0x81, 0xb8, 0xbf) + // 集合
			GetString_SJISCodeRange(0x81, 0xc8, 0xce) + // 論理
			GetString_SJISCodeRange(0x81, 0xda, 0xe8) + // 数学
			GetString_SJISCodeRange(0x81, 0xf0, 0xf7) +
			GetString_SJISCodeRange(0x81, 0xfc, 0xfc) +
			GetString_SJISCodeRange(0x83, 0x9f, 0xb6) + // ギリシャ語大文字
			GetString_SJISCodeRange(0x83, 0xbf, 0xd6) + // ギリシャ語小文字
			GetString_SJISCodeRange(0x84, 0x40, 0x60) + // キリル文字大文字
			GetString_SJISCodeRange(0x84, 0x70, 0x7e) + // キリル文字小文字(1)
			GetString_SJISCodeRange(0x84, 0x80, 0x91) + // キリル文字小文字(2)
			GetString_SJISCodeRange(0x84, 0x9f, 0xbe) + // 枠線
			GetString_SJISCodeRange(0x87, 0x40, 0x5d) + // 機種依存文字(1)
			GetString_SJISCodeRange(0x87, 0x5f, 0x75) + // 機種依存文字(2)
			GetString_SJISCodeRange(0x87, 0x7e, 0x7e) + // 機種依存文字(3)
			GetString_SJISCodeRange(0x87, 0x80, 0x9c) + // 機種依存文字(4)
			GetString_SJISCodeRange(0xee, 0xef, 0xfc); // 機種依存文字(5)

		public static string MBC_CHOUONPU = GetString_SJISCodeRange(0x81, 0x5b, 0x5b); // 815b == 長音符


		public static string MBC_KANA =
			GetString_SJISCodeRange(0x83, 0x40, 0x7e) +
			GetString_SJISCodeRange(0x83, 0x80, 0x96) + MBC_CHOUONPU;

		private static string GetString_SJISCodeRange(int lead, int trailMin, int trailMax)
		{
			byte[] buff = new byte[(trailMax - trailMin + 1) * 2];

			for (int trail = trailMin; trail <= trailMax; trail++)
			{
				buff[(trail - trailMin) * 2 + 0] = (byte)lead;
				buff[(trail - trailMin) * 2 + 1] = (byte)trail;
			}
			return ENCODING_SJIS.GetString(buff);
		}

		public static int Comp(string a, string b)
		{
			return BinTools.Comp(Encoding.UTF8.GetBytes(a), Encoding.UTF8.GetBytes(b));
		}

		public static int CompIgnoreCase(string a, string b)
		{
			return Comp(a.ToLower(), b.ToLower());
		}

		public class IEComp : IEqualityComparer<string>
		{
			public bool Equals(string a, string b)
			{
				return a == b;
			}

			public int GetHashCode(string a)
			{
				return a.GetHashCode();
			}
		}

		public class IECompIgnoreCase : IEqualityComparer<string>
		{
			public bool Equals(string a, string b)
			{
				return a.ToLower() == b.ToLower();
			}

			public int GetHashCode(string a)
			{
				return a.ToLower().GetHashCode();
			}
		}






		public static bool StartsWithIgnoreCase(string str, string ptn)
		{
			return str.ToLower().StartsWith(ptn.ToLower());
		}


























































































































































































































































		public static string[] Tokenize(string str, string delimiters, bool meaningFlag = false, bool ignoreEmpty = false, int limit = 0)
		{
			StringBuilder buff = new StringBuilder();
			List<string> tokens = new List<string>();

			foreach (char chr in str)
			{
				if (tokens.Count + 1 == limit || delimiters.Contains(chr) == meaningFlag)
				{
					buff.Append(chr);
				}
				else
				{
					if (ignoreEmpty == false || buff.Length != 0)
						tokens.Add(buff.ToString());

					buff = new StringBuilder();
				}
			}
			if (ignoreEmpty == false || buff.Length != 0)
				tokens.Add(buff.ToString());

			return tokens.ToArray();
		}

		public static bool HasSameChar(string str)
		{
			for (int r = 1; r < str.Length; r++)
				for (int l = 0; l < r; l++)
					if (str[l] == str[r])
						return true;

			return false;
		}










































































































































































































































	}
}
