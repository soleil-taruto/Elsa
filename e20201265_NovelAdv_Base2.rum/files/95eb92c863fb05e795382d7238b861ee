using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.Commons;
using Charlotte.GameCommons;
using Charlotte.GameCommons.Options;

namespace Charlotte.Games.Surfaces
{
	public class Surface_スクリーン : Surface
	{
		private class LayerInfo
		{
			public string ImageFile;
			public double A = 1.0;
			public double SlideRate = 0.5;
			public double DestSlideRate = 0.5;

			// <---- prm

			public string[] Serialize()
			{
				return new string[]
				{
					this.ImageFile,
					this.A.ToString("F9"),
					this.SlideRate.ToString("F9"),
					this.DestSlideRate.ToString("F9"),
				};
			}

			public static LayerInfo Deserialize(string[] lines)
			{
				LayerInfo layer = new LayerInfo();
				layer.S_Deserialize(lines);
				return layer;
			}

			private void S_Deserialize(string[] lines)
			{
				int c = 0;

				this.ImageFile = lines[c++];
				this.A = double.Parse(lines[c++]);
				this.SlideRate = double.Parse(lines[c++]);
				this.DestSlideRate = double.Parse(lines[c++]);
			}
		}

		private List<LayerInfo> Layers = new List<LayerInfo>();

		private LayerInfo FrontEndImage
		{
			get
			{
				return this.Layers[this.Layers.Count - 1];
			}
		}

		public Surface_スクリーン(string typeName, string instanceName)
			: base(typeName, instanceName)
		{
			this.Z = 10000;
		}

		public override IEnumerable<bool> E_Draw()
		{
			for (; ; )
			{
				this.P_Draw();

				yield return true;
			}
		}

		private void P_Draw()
		{
			foreach (LayerInfo layer in this.Layers)
			{
				DDUtils.Approach(ref layer.SlideRate, layer.DestSlideRate, 0.9999);

				DDPicture picture = DDCCResource.GetPicture(layer.ImageFile);
				D2Size size = DDUtils.AdjustRectExterior(picture.GetSize().ToD2Size(), new D4Rect(0, 0, DDConsts.Screen_W, DDConsts.Screen_H)).Size;

				DDDraw.SetAlpha(layer.A);
				DDDraw.DrawRect(
					picture,
					(DDConsts.Screen_W - size.W) * layer.SlideRate,
					(DDConsts.Screen_H - size.H) * layer.SlideRate,
					size.W,
					size.H
					);
				DDDraw.Reset();
			}
		}

		protected override void Invoke_02(string command, params string[] arguments)
		{
			int c = 0;

			if (command == "画像")
			{
				this.Act.AddOnce(() => this.Layers.Add(new LayerInfo() { ImageFile = arguments[c++] }));
			}
			else if (command == "スライド")
			{
				if (arguments.Length == 1)
				{
					this.Act.AddOnce(() => this.FrontEndImage.DestSlideRate = double.Parse(arguments[c++]));
				}
				else if (arguments.Length == 2)
				{
					this.Act.AddOnce(() =>
					{
						this.FrontEndImage.SlideRate = double.Parse(arguments[c++]);
						this.FrontEndImage.DestSlideRate = double.Parse(arguments[c++]);
					});
				}
				else
				{
					throw new DDError();
				}
			}
			else if (command == "画像フェードイン")
			{
				this.Act.Add(SCommon.Supplier(this.画像フェードイン(arguments[c++])));
			}
			else if (command == "フェードアウト")
			{
				this.Act.Add(SCommon.Supplier(this.フェードアウト()));
			}
			else
			{
				throw new DDError();
			}
		}

		private IEnumerable<bool> 画像フェードイン(string imageFile)
		{
			this.Layers.Add(new LayerInfo() { ImageFile = imageFile, A = 0.0 });

			foreach (DDScene scene in DDSceneUtils.Create(60))
			{
				if (Act.IsFlush)
				{
					this.FrontEndImage.A = 1.0;
					yield break;
				}
				this.FrontEndImage.A = scene.Rate;
				this.P_Draw();

				yield return true;
			}
		}

		private IEnumerable<bool> フェードアウト()
		{
			foreach (DDScene scene in DDSceneUtils.Create(60))
			{
				if (Act.IsFlush)
				{
					this.FrontEndImage.A = 0.0;
					yield break;
				}
				this.FrontEndImage.A = 1.0 - scene.Rate;
				this.P_Draw();

				yield return true;
			}
		}

		protected override string[] Serialize_02()
		{
			return new string[]
			{
				AttachString.I.Untokenize(
					this.Layers.Select(layer => AttachString.I.Untokenize(layer.Serialize()))
					),
			};
		}

		protected override void Deserialize_02(string[] lines)
		{
			int c = 0;

			this.Layers = AttachString.I.Tokenize(lines[c++])
				.Select(line => LayerInfo.Deserialize(AttachString.I.Tokenize(line)))
				.ToList();
		}
	}
}
