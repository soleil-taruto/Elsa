using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.GameCommons;
using Charlotte.Commons;

namespace Charlotte.Games.Tiles
{
	public abstract class Tile_水辺系 : Tile
	{
		protected DDPicture[,] PictureTable;
		protected int PictureTable_L;
		protected int PictureTable_T;
		protected int AnimeKomaNum;
		protected int AnimeKomaSpan;

		public Tile_水辺系(DDPicture[,] pictbl, int pictbl_l, int pictbl_t, int animeKomaNum, int animeKomaSpan)
		{
			this.PictureTable = pictbl;
			this.PictureTable_L = pictbl_l;
			this.PictureTable_T = pictbl_t;
			this.AnimeKomaNum = animeKomaNum;
			this.AnimeKomaSpan = animeKomaSpan;
		}

		protected static Tile_水辺系 Self;

		public override void Draw(double x, double y)
		{
			Self = this;

			this.Point = new D2Point(x, y);
			this.MapCellCenterPoint = new D2Point(DDGround.ICamera.X + x, DDGround.ICamera.Y + y);
			this.MapTablePoint = new I2Point((int)MapCellCenterPoint.X / Consts.TILE_W, (int)MapCellCenterPoint.Y / Consts.TILE_H);

			if (!_draw.Execute())
				throw null; // never
		}

		protected D2Point Point;
		protected D2Point MapCellCenterPoint;
		protected I2Point MapTablePoint;

		protected abstract bool IsFriend(Tile tile);

		private DrawTask _draw = new DrawTask();

		private class DrawTask : DDTask
		{
			public override IEnumerable<bool> E_Task()
			{
				for (; ; )
					for (int c = 0; c < Self.AnimeKomaNum; c++)
						foreach (DDScene scene in DDSceneUtils.Create(Self.AnimeKomaSpan))
							yield return this.Draw_KBKFA(c, (c + 1) % Self.AnimeKomaNum, scene.Rate);
			}

			private bool Draw_KBKFA(int komaBack, int komaFront, double komaFrontAlpha)
			{
				bool friend_4 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X - 1, Self.MapTablePoint.Y).Tile);
				bool friend_6 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X + 1, Self.MapTablePoint.Y).Tile);
				bool friend_8 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X, Self.MapTablePoint.Y - 1).Tile);
				bool friend_2 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X, Self.MapTablePoint.Y + 1).Tile);

				bool friend_1 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X - 1, Self.MapTablePoint.Y + 1).Tile);
				bool friend_3 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X + 1, Self.MapTablePoint.Y + 1).Tile);
				bool friend_7 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X - 1, Self.MapTablePoint.Y - 1).Tile);
				bool friend_9 = Self.IsFriend(Game.I.Map.GetCell(Self.MapTablePoint.X + 1, Self.MapTablePoint.Y - 1).Tile);

				I2Point lt;
				I2Point rt;
				I2Point lb;
				I2Point rb;

				if (friend_4 && friend_8)
					lt = friend_7 ? new I2Point(2, 4) : new I2Point(2, 0);
				else if (friend_4)
					lt = new I2Point(2, 2);
				else if (friend_8)
					lt = new I2Point(0, 4);
				else
					lt = new I2Point(0, 2);

				if (friend_6 && friend_8)
					rt = friend_9 ? new I2Point(1, 4) : new I2Point(3, 0);
				else if (friend_6)
					rt = new I2Point(1, 2);
				else if (friend_8)
					rt = new I2Point(3, 4);
				else
					rt = new I2Point(3, 2);

				if (friend_4 && friend_2)
					lb = friend_1 ? new I2Point(2, 3) : new I2Point(2, 1);
				else if (friend_4)
					lb = new I2Point(2, 5);
				else if (friend_2)
					lb = new I2Point(0, 3);
				else
					lb = new I2Point(0, 5);

				if (friend_6 && friend_2)
					rb = friend_3 ? new I2Point(1, 3) : new I2Point(3, 1);
				else if (friend_6)
					rb = new I2Point(1, 5);
				else if (friend_2)
					rb = new I2Point(3, 3);
				else
					rb = new I2Point(3, 5);

				foreach (var info in new[]
				{
					new { PtPt = lt, DrPt = new { X = -1, Y = -1 } },
					new { PtPt = rt, DrPt = new { X =  1, Y = -1 } },
					new { PtPt = lb, DrPt = new { X = -1, Y =  1 } },
					new { PtPt = rb, DrPt = new { X =  1, Y =  1 } },
				})
				{
					DDDraw.DrawCenter(
						Self.PictureTable[Self.PictureTable_L + info.PtPt.X + komaBack * 4, Self.PictureTable_T + info.PtPt.Y],
						Self.Point.X + info.DrPt.X * Consts.MINI_TILE_W / 2,
						Self.Point.Y + info.DrPt.Y * Consts.MINI_TILE_H / 2
						);
					DDDraw.SetAlpha(komaFrontAlpha);
					DDDraw.DrawCenter(
						Self.PictureTable[Self.PictureTable_L + info.PtPt.X + komaFront * 4, Self.PictureTable_T + info.PtPt.Y],
						Self.Point.X + info.DrPt.X * Consts.MINI_TILE_W / 2,
						Self.Point.Y + info.DrPt.Y * Consts.MINI_TILE_H / 2
						);
					DDDraw.Reset();
				}
				return true;
			}
		}
	}
}
